<?php

/*
* Implementation of hook permission for admin review page
*/ 
function admin_review_permission(){
  return array(
		'access mypage' => array(
		'title' => t('admin feedbacks'),
		'description' => t('see all feedbacks only for admin'),
    ),
  );
}


/*
* Implementation of hook menu for admin review page
*/ 
function admin_review_menu() {
	$items = array();

	$items['review/allreviews'] = array(
		'title' => 'all reviews',
		'description' => 'all feedback will be shown.',
		'page callback' => 'myview',
		'access callback' => 'user_access',
		'access arguments'=> array('access mypage'),
	);

	return $items;
}


/*
*function callback all_feedbacks for hook menu
* form to show all the list of users
*/

function admin_review_form($form, &$form_state) {
	// dpm($form);
	// dpm($form_state);
  $form['userslist'] = array(
	 '#type' => 'select',
	 '#title' => t('Choose User'), 
	 '#options' => getUsers(),
  );

  $form['submit_button'] = array(
   '#type' => 'submit',
   '#value' => t('GET'), 
  );
	return $form;
}

/* 
*form validation for admin review form
*/
function admin_review_form_validate($form, &$form_state){
	global $user;
	$current_user_timestamp = $user->timestamp;
	$current_user_date = format_date($current_user_timestamp,'custom','d');
	$current_user_month = format_date($current_user_timestamp,'custom','m');
	$current_user_year = format_date($current_user_timestamp,'custom','Y');
	$current_user_month_less = $current_user_month - 1;
	$current_user_month_more = $current_user_month + 1;
	$date1 = mktime(0,0,0,$current_user_month_less,21,$current_user_year);
	$date2 = mktime(0,0,0,$current_user_month_more,01,$current_user_year);

	/**
	* query to get all the nodes of review(admin final rating) for current *month  
	*/
	$query5 = db_select('node', 'n')
		      ->condition('n.type', 'review','=')
		      ->condition('n.created',array($date1,$date2),'BETWEEN')
		      ->fields('n',array('nid','created'));

	$query5 ->join('field_data_field_select_user','su','n.nid = su.entity_id');	    
	$query5 ->fields('su',array('field_select_user_target_id'));

	$result5 = $query5->execute();
  $fields5 =$result5->fetchAll();

  if(!empty($fields5)){
		foreach ($fields5 as $key => $value5) {
			$nid = $value5->nid;
			$timestamp = $value5->created;
			$nodes = node_load($nid);
			// dpm($nodes);

			$used_user_date = format_date($timestamp ,'custom','d');
			$used_user_month = format_date($timestamp ,'custom','m');


			$selected_user_id = field_get_items('node', $nodes, 'field_select_user')[0]['target_id'];

			$user_session = field_get_items('node', $nodes, 'field_session')[0]['tid'];


			if($current_user_date >'5' and $current_user_date <'21') {

				if($form_state['input']['userslist'] == $selected_user_id and  $current_user_month == $used_user_month ) {

					form_set_error('userslist', t('You have already reviewed for this user.'));
				}

				else {
					continue;
				}
			}

			else {

				if($form_state['input']['userslist'] == $selected_user_id and  $current_user_month == $used_user_month) {

					form_set_error('userslist', t('You have already reviewed for this user.'));
				}

				else if($form_state['input']['userslist'] == $selected_user_id and  ($current_user_month+1) == $used_user_month) {
					
					form_set_error('userslist', t('You have already reviewed for this user.'));
				}


				else {
					continue;
				}
			}
		}
	}
}



/* 
*form submit
*/
function admin_review_form_submit($form, &$form_state) {
	$user_id_value = $form_state['values']['userslist'];
	drupal_goto('node/add/review', array('query'=>array('user_id' => $user_id_value)
	));
}


/*
* function to get the users list on all reviews form
*/
function getUsers(){
	$query6 = db_select('users','u')
					->condition('u.uid',0,'<>')
					->fields('u',array('uid','name'))
					->execute();
	$result6 = $query6->fetchAll();
	$list = array();
	$list['a'] = 'Select';

	foreach ($result6 as $key => $value6) {
		$list[$value6->uid] = $value6->name;
	}
	return $list;
}


/*
* Implements hook_block_info().
* Used to create a custom block
*/
function admin_review_block_info() {
  $blocks = array();
  $blocks['my_block'] = array(
	  'info' => t('All feedback Block'),
  );
  return $blocks;
}


/**
* Implements hook_block_view().
*/
function admin_review_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'my_block':
      $block['subject'] = t('self appraisal Block');
      $block['content'] = reviews_self();
      break;

    case 'my_block':
      $block['subject'] = t('give feedback Block');
      $block['content'] = reviews_feedback();
      break;

    case 'my_block':
      $block['subject'] = t('mentor appraisal Block');
      $block['content'] = reviews_mentor();
      break;
  }    
  return $block;
}


/*
*showing all  self appraisal feedbacks related to that user
*/
function reviews_self(){
	$query_param = drupal_get_query_parameters();
	if(!empty($query_param)){
		$userid_condition = $query_param['user_id'];
	}
		
	
	/**
	* to get the current user data
	*/	
	$user_data = current_user_info();


	/**
	* query to get all self appraisal nodes for the selected user
	*/
	if($user_data['current_user_date'] >'5' and $user_data['current_user_date'] <'21') {
	 	$query7 = db_select('node', 'n')
		       ->condition('n.type', 'self_rating','=')
		       ->condition('n.created',array($user_data['date1'],$user_data['date2']),'BETWEEN')
		       ->condition('n.uid',$userid_condition,'=')
		       ->fields('n',array('nid','uid'));

   	$query7->join('field_data_field_time_line','tl','n.nid = tl.entity_id');
   	$query7->condition('tl.field_time_line_tid','26','=');
   	$query7->fields('tl',array('field_time_line_tid'));
  }  

  else{
  	$query7 = db_select('node', 'n')
		       ->condition('n.type', 'self_rating','=')
		       ->condition('n.created',array($user_data['date3'],$user_data['date4']),'BETWEEN')
		       ->condition('n.uid',$userid_condition,'=')
		       ->fields('n',array('nid','uid'));

   	$query7->join('field_data_field_time_line','tl','n.nid = tl.entity_id');
   	$query7->condition('tl.field_time_line_tid','25','=');
   	$query7->fields('tl',array('field_time_line_tid'));
  }
	
	
  $result7 = $query7->execute();
  $fields7 =$result7->fetchAll();
  if(!empty($fields7)) {

	  $header = array(t('Field learning'), t('Time spent'), t('Productivity'),  t('Timeline'), t('Mentor'));
		$rows = array();
	 
		foreach ($fields7 as $key => $value7) {
			$nid = $value7->nid;
			$nodes = node_load($nid);
			

			/**
		 	*field learning field collection extraction
			*/
			$item1 = entity_load('field_collection_item', array($nodes->field_learning[LANGUAGE_NONE][0]['value']));
			$feedback1 = array();
			$rating1 = array();
			foreach ($item1 as $key => $itemid) {
				$feedback1 = $itemid->field_feedback['und'][0]['value'];
				$rating1 = $itemid->field_rating['und'][0]['value'];
			}
			
			/*
			* field time spent  field collection extraction
			*/
			$item2 = entity_load('field_collection_item', array($nodes->field_time_spent[LANGUAGE_NONE][0]['value']));
			$feedback2 = array();
			$rating2 = array();
			foreach ($item2 as $key => $itemid2) {
				$feedback2 = $itemid2->field_feedback['und'][0]['value'];
				$rating2 = $itemid2->field_rating['und'][0]['value'];
			}

			/*
			* field productivity field collection extraction
			*/
			$item3 = entity_load('field_collection_item', array($nodes->field_productivity[LANGUAGE_NONE][0]['value']));
			$feedback3 = array();
			$rating3 = array();
			foreach ($item3 as $key => $itemid3) {
				$feedback3 = $itemid3->field_feedback['und'][0]['value'];
				$rating3 = $itemid3->field_rating['und'][0]['value'];
			}

			/**
			* field timeline 
			*/
			$item4 = field_get_items('node',$nodes,'field_time_line')[0]['tid'];
			$taxo_id = taxonomy_term_load($item4);
			$timeline_name = $taxo_id->name;
			
			/**
		 	* field mentor
		 	*/
			$item5 = field_get_items('node',$nodes,'field_mentor')[0]['uid'];
			$ment_id = user_load($item5);
			$mentor_name = $ment_id->name;

			$subrow = array();
		  $subrow[] = $feedback1.' <br/> '.$rating1;
		  $subrow[] = $feedback2.' <br/> '.$rating2;
		  $subrow[] = $feedback3.' <br/> '.$rating3;
		  $subrow[] = $timeline_name;
		  $subrow[] = $mentor_name;
		  $rows[] = $subrow;
	  }  
		  
		$out1 = theme('table', array('header' => $header, 'rows' => $rows, 'caption' => 'SELF APPRAISAL'));
		$out = '<div class="my">'. $out1 .'</div>';

		return $out;
	}
}
	  

	
/*
* showing all the feedbacks given by all members to seleted user
*/
function reviews_feedback(){
	$query_paramas = drupal_get_query_parameters();
	if(!empty($query_paramas)){
		$userid_condition = $query_paramas['user_id'];
	}

	/**
	* to get the current user data
	*/	
	$user_data = current_user_info();
	 
	/**
	* query to get all feedback received by selected user
	*/
  $query8 =db_select('field_data_field_users','fu')
         ->condition('fu.field_users_target_id',$userid_condition,'=')
				 ->fields('fu',array('entity_type','bundle','entity_id'))
				 ->execute();
	$result8 = $query8->fetchAll();
 

  if(!empty($result8)) {
		
		$user_ref_node_title = array();

		$header = array(t('Username'),  t('Feedback'), t('Rating'), t('Timeline'));
		$rows = array();
	 
  	foreach ($result8 as $value8) {
  		$nid= $value8->entity_id;


  		if($user_data['current_user_date'] >'5' and $user_data['current_user_date'] <'21') {
			 	$query9 = db_select('node', 'n')
				       ->condition('n.type', 'give_feedback','=')
				       ->condition('n.created',array($user_data['date1'],$user_data['date2']),'BETWEEN')
				       ->condition('n.nid',$nid,'=')
				       ->fields('n',array('nid','uid'));

		   	$query9->join('field_data_field_time_line','tl','n.nid = tl.entity_id');
		   	$query9->condition('tl.field_time_line_tid','26','=');
		  }  

		  else{
		  	$query9 = db_select('node', 'n')
				       ->condition('n.type', 'give_feedback','=')
				       ->condition('n.created',array($user_data['date3'],$user_data['date4']),'BETWEEN')
				       ->condition('n.nid',$nid,'=')
				       ->fields('n',array('nid','uid'));

		   	$query9->join('field_data_field_time_line','tl','n.nid = tl.entity_id');
		   	$query9->condition('tl.field_time_line_tid','25','=');
		  }
	
			$result9 = $query9->execute();
			$fields9 = $result9->fetchAll();

			if(!empty($fields9)){
  		
	  	
				foreach ($fields9 as $key => $value9)	{
					$user_ref_node_id = $value9->nid;
		      $items = node_load($user_ref_node_id);
		     // dpm($items);

		      
		      
		      $item1 = field_get_items('node',$items,'field_feedback_')[0]['value'];
	     
		      $item2 = field_get_items('node',$items,'field_rating')[0]['value'];

		      $item3 = field_get_items('node',$items,'field_time_line')[0]['tid'];
		      $period_id = taxonomy_term_load($item3);
					$period_name = $period_id->name;
	      
					$item4 = field_get_items('node',$items,'field_users')[0]['target_id'];
					$uids = user_load($item4);
					$user_name = $uids->name;
									
					$subrow = array();
				  $subrow[] = $user_name;
				  $subrow[] = $item1;
				  $subrow[] = $item2;
				  $subrow[] = $period_name;
				  $rows[] = $subrow;
				}  
			}
		}	
				  
		return theme('table', array('header' => $header, 'rows' => $rows, 'caption' => 'GIVE FEEDBACK')); 
	}    
}
	
			  
			

				
/*
*	showing all the feedbacks given by mentor to selected user.      
 */ 	
function reviews_mentor(){
	$query_param1 = drupal_get_query_parameters();
	if(!empty($query_param1)){
		$userid_condition = $query_param1['user_id'];
		//dpm($userid_condition);
	}

	/**
	* to get the current user data
	*/	
	$user_data = current_user_info();

	if($user_data['current_user_date'] >'5' and $user_data['current_user_date'] <'21') {
	 	$query10 = db_select('node', 'n')
		       ->condition('n.type', 'self_rating','=')
		       ->condition('n.created',array($user_data['date1'],$user_data['date2']),'BETWEEN')
		       ->condition('n.uid',$userid_condition,'=')
		       ->fields('n',array('nid','uid','created','title'));

   	$query10->join('field_data_field_time_line','tl','n.nid = tl.entity_id');
   	$query10->condition('tl.field_time_line_tid','26','=');
   	$query10->fields('tl',array('field_time_line_tid'));
  }  

  else {
  	$query10 = db_select('node', 'n')
		       ->condition('n.type', 'self_rating','=')
		       ->condition('n.created',array($user_data['date3'],$user_data['date4']),'BETWEEN')
		       ->condition('n.uid',$userid_condition,'=')
		       ->fields('n',array('nid','uid','created','title'));

   	$query10->join('field_data_field_time_line','tl','n.nid = tl.entity_id');
   	$query10->condition('tl.field_time_line_tid','25','=');
   	$query10->fields('tl',array('field_time_line_tid'));
  }
		
  $result10 = $query10->execute();
  $fields10 =$result10->fetchAll();

  if(!empty($fields10)) {
	
	  $header = array(t('Learning'), t('Timespent'), t('Productivity'), t('Mentor Assigned'), t('Feedback given to node title'));
		$rows = array();
	 
  	foreach ($fields10 as $key => $value10) {
			$nid1 = $value10->nid;
			

			$query11 = db_select('field_data_field_xyz','x')
              ->condition('x.field_xyz_target_id',$nid1,'=')
				      ->fields('x',array('entity_id'));
			$query11->join('node','n','n.nid = x.entity_id');
			$query11->fields('n',array('nid','uid')); 

		  $result11 = $query11->execute();
		  $fields11 = $result11->fetchAll();
			
			if(!empty($fields11)) {

				foreach ($fields11 as $key => $value11)	{
					$mentor_ref_node_id = $value11->nid;
		      $items3 = node_load('node', $mentor_ref_node_id);
					
					/**
					* to get the name of mentor who has given appraisal
					*/
					$mentor_id = $items3->uid;
					$uids_mentor = user_load($mentor_id);
					$mentor_name_author = $uids_mentor->name;
					
					/**
					* field learning field collection extraction
					*/				
					$item1 = entity_load('field_collection_item', array($items3->field_learning[LANGUAGE_NONE][0]['value']));
					$feedback1 = array();
					$rating1 = array();
					foreach ($item1 as $key => $itemid) {
						$feedback1 = $itemid->field_feedback['und'][0]['value'];
						$rating1 = $itemid->field_rating['und'][0]['value'];
					}
								
					/**
					* field time spent  field collection extraction
					*/
					$item2 = entity_load('field_collection_item', array($items3->field_time_spent[LANGUAGE_NONE][0]['value']));
					$feedback2 = array();
					$rating2 = array();
					foreach ($item2 as $key => $itemid2) {
						$feedback2 = $itemid2->field_feedback['und'][0]['value'];
						$rating2 = $itemid2->field_rating['und'][0]['value'];
					}


					/**
					* field productivity field collection extraction
					*/
					$item3 = entity_load('field_collection_item', array($items3->field_productivity[LANGUAGE_NONE][0]['value']));
					$feedback3 = array();
					$rating3 = array();
					foreach ($item3 as $key => $itemid3) {
						$feedback3 = $itemid3->field_feedback['und'][0]['value'];
						$rating3 = $itemid3->field_rating['und'][0]['value'];
					}

					/**
					* title for feedback given to self appraisal node 
					*/
					$item4 = field_get_items('node',$items3,'field_xyz')[0]['target_id'];
					$self_title_nid =node_load($item4);
					$self_appraisal_feedback_title = $self_title_nid->title;

					$subrow = array();
				  $subrow[] = $feedback1.' <br/> '.$rating1;
				  $subrow[] = $feedback2.' <br/> '.$rating2;
				  $subrow[] = $feedback3.' <br/> '.$rating3;
				  $subrow[] = $mentor_name_author;
				  $subrow[] = $self_appraisal_feedback_title;
				  $rows[] = $subrow;
		    }
			}
		}
	 return theme('table', array('header' => $header, 'rows' => $rows, 'caption' => 'MENTOR APPRAISAL')); 
	}
}
 	

/*
*for page callback- to render form on hook menu page
*/
function myview(){
	$form_view = drupal_get_form('admin_review_form');
	$output = drupal_render($form_view);
	/*$output .= reviews_self();
	$output .= reviews_feedback();
	$output .= reviews_mentor();
*/
	return $output;
}

/*
* form alter on add review form
*/
function admin_review_form_review_node_form_alter(&$form, &$form_state, $form_id){
	//dpm($form);
	//dpm($form_state);

	global $user;
	$current_user_timestamp = $user->timestamp;
	$current_user_date = format_date($current_user_timestamp,'custom','d');
	$current_user_month = format_date($current_user_timestamp,'custom','m');
	
	$query_param = drupal_get_query_parameters();
	if(!empty($query_param)){
		$userid_condition = $query_param['user_id'];
	}

  $class  = reviews_self();
  $class .= reviews_feedback();
  $class .= reviews_mentor();

	$form['#prefix'] = '<div>' .$class. '</div>';
  $form['#suffix'] = '</div>';

  if($current_user_date >'5' and $current_user_date <'21'){
  	$session1 = '27';
  	$form['field_session']['und']['#default_value'] = $session1;
  }
  else{
  	$session2 = '28';
  	$form['field_session']['und']['#default_value'] = $session2;
  }
  $form['field_session']['#access'] = FALSE;
	$form['field_select_user']['#access'] = FALSE;
	$form['field_select_user']['und']['#default_value'] = $userid_condition;
}


/*
** function to get the current user data 
*/	
	
function current_user_info() {
  global $user;
	$current_user_timestamp = $user->timestamp;
  $info = array();
	$info['current_user_date'] = format_date($current_user_timestamp,'custom','d');

	$info['current_user_month'] = format_date($current_user_timestamp,'custom','m');

	$info['current_user_year'] = format_date($current_user_timestamp,'custom','Y');

	$info['current_user_month_less'] = $info['current_user_month'] - 1;

	$info['date1'] = mktime(0,0,0,$info['current_user_month_less'],15,$info['current_user_year']);

	$info['date2'] = mktime(23,59,59,$info['current_user_month'],05,$info['current_user_year']);
	$info['date3'] = mktime(0,0,0,$info['current_user_month'],01,$info['current_user_year']);

	$info['date4'] = mktime(23,59,59,$info['current_user_month'],20,$info['current_user_year']);

	return $info;
}
 










 

	
